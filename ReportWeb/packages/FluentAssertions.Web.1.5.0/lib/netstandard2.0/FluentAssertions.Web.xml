<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FluentAssertions.Web</name>
    </assembly>
    <members>
        <member name="T:FluentAssertions.Web.BadRequestAssertions">
            <summary>
            Contains a number of methods to assert that an <see cref="T:System.Net.Http.HttpResponseMessage"/> is in the expected state related to HTTP Bad Request response
            </summary>
        </member>
        <member name="M:FluentAssertions.Web.BadRequestAssertions.#ctor(System.Net.Http.HttpResponseMessage)">
            <summary>
            Initialized a new instance of the <see cref="T:FluentAssertions.Web.BadRequestAssertions"/>
            class.
            </summary>
            <param name="value">The subject value to be asserted.</param>
        </member>
        <member name="P:FluentAssertions.Web.BadRequestAssertions.Identifier">
            <summary>
            Returns the type of the subject the assertion applies on.
            </summary>
        </member>
        <member name="M:FluentAssertions.Web.BadRequestAssertions.HaveError(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a Bad Request HTTP response content contains an error message identifiable by an expected field name and a wildcard error text.
            </summary>
            <remarks>
            This assertion considers the HTTP response content a JSON generated by the ASP.NET Core 3.0 framework or less
            </remarks>
            <param name="expectedErrorField">
            The expected field name.
            </param>
            <param name="expectedWildcardErrorMessage">
            The wildcard pattern with which the error field associated error message is matched, where * and ? have special meanings.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.BadRequestAssertions.OnlyHaveError(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a Bad Request HTTP response content contains only a single error message identifiable by an expected field name and a wildcard error text.
            </summary>
            <remarks>
            This assertion considers the HTTP response content a JSON generated by the ASP.NET Core 3.0 framework or less
            </remarks>
            <param name="expectedErrorField">
            The expected field name.
            </param>
            <param name="expectedWildcardErrorMessage">
            The wildcard pattern with which the error field associated error message is matched, where * and ? have special meanings.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.BadRequestAssertions.NotHaveError(System.String,System.String,System.Object[])">
            <summary>
            Asserts that a Bad Request HTTP response content does not contain an error message identifiable by an expected field name.
            </summary>
            <remarks>
            This assertion considers the HTTP response content a JSON generated by the ASP.NET Core 3.0 framework or less
            </remarks>
            <param name="expectedErrorField">
            The expected field name.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.BadRequestAssertions.HaveErrorMessage(System.String,System.String,System.Object[])">
            <summary>
            Asserts that a Bad Request HTTP response content contains an error message identifiable by an wildcard error text.
            </summary>
            <param name="expectedWildcardErrorMessage">
            The wildcard pattern with which the error field associated error message is matched, where * and ? have special meanings.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="T:FluentAssertions.Web.HeadersAssertions">
            <summary>
            Contains a number of methods to assert that an <see cref="T:System.Net.Http.HttpResponseMessage"/> is in the expected state related to HTTP headers.
            </summary>
        </member>
        <member name="M:FluentAssertions.Web.HeadersAssertions.#ctor(System.Net.Http.HttpResponseMessage,System.String)">
            <summary>
            Initialized a new instance of the <see cref="T:FluentAssertions.Web.HeadersAssertions"/>
            class.
            </summary>
            <param name="value">The subject value to be asserted.</param>
            <param name="header">The HTTP header name to be asserted.</param>
        </member>
        <member name="M:FluentAssertions.Web.HeadersAssertions.Match(System.String,System.String,System.Object[])">
            <summary>
            Asserts that an existing HTTP header in a HTTP response contains at least a value that matches a wildcard pattern.
            </summary>
            <param name="expectedWildcardValue">
            The wildcard pattern with which the subject is matched, where * and ? have special meanings.
            <remarks>
                <para>* - Matches any number of characters. You can use the asterisk (*) anywhere in a character string. Example: wh* finds what, white, and why, but not awhile or watch.</para>
                <para>? - Matches a single alphabet in a specific position. Example: b?ll finds ball, bell, and bill.</para>
            </remarks>
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HeadersAssertions.BeEmpty(System.String,System.Object[])">
            <summary>
            Asserts that an existing HTTP header in a HTTP response has no values.
            </summary>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HeadersAssertions.NotBeEmpty(System.String,System.Object[])">
            <summary>
            Asserts that an existing HTTP header in a HTTP response has any values.
            </summary>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HeadersAssertions.BeValues(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object[])">
            <summary>
            Asserts that an existing HTTP header in a HTTP response has an expected list of header values.
            </summary>
            <param name="expectedValues">
            The expected values with which the HTTP headers values list is compared.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HeadersAssertions.BeValue(System.String,System.String,System.Object[])">
            <summary>
            Asserts that an existing HTTP header in a HTTP response has an expected value.
            </summary>
            <param name="expectedValue">
            The expected value with which the HTTP header value list is compared.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="P:FluentAssertions.Web.HeadersAssertions.Identifier">
            <summary>
            Returns the type of the subject the assertion applies on.
            </summary>
        </member>
        <member name="T:FluentAssertions.Web.HttpResponseMessageAssertions">
            <summary>
            Contains a number of methods to assert that an <see cref="T:System.Net.Http.HttpResponseMessage"/> is in the expected state related to the HTTP content.
            </summary>
            <summary>
            Contains a number of methods to assert that an <see cref="T:System.Net.Http.HttpResponseMessage"/> is in the expected state.
            </summary>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.HaveHeader(System.String,System.String,System.Object[])">
            <summary>
            Asserts that an HTTP response has a named header.
            </summary>
            <param name="expectedHeader">
            The expected header with which the HTTP headers list is matched.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.NotHaveHeader(System.String,System.String,System.Object[])">
            <summary>
            Asserts that an HTTP response does not have a named header.
            </summary>
            <param name="expectedHeader">
            The expected header with which the HTTP headers list is matched.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.BeEmpty(System.String,System.Object[])">
            <summary>
            Asserts that the HTTP content is empty.
            </summary>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.BeAs``1(``0,System.String,System.Object[])">
            <summary>
            Asserts that HTTP response content can be an equivalent representation of the expected model.
            </summary>
            <param name="expectedModel">
            The expected model.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.BeAs``1(``0,System.Func{FluentAssertions.Equivalency.EquivalencyAssertionOptions{``0},FluentAssertions.Equivalency.EquivalencyAssertionOptions{``0}},System.String,System.Object[])">
            <summary>
            Asserts that HTTP response content can be an equivalent representation of the expected model.
            </summary>
            <param name="expectedModel">
            The expected model.
            </param>
            <param name="options">
            A reference to the <see cref="T:FluentAssertions.Equivalency.EquivalencyAssertionOptions`1"/> configuration object that can be used
            to influence the way the object graphs are compared. You can also provide an alternative instance of the
            <see cref="T:FluentAssertions.Equivalency.EquivalencyAssertionOptions`1"/> class. The global defaults are determined by the
            <see cref="T:FluentAssertions.AssertionOptions"/> class.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.MatchInContent(System.String,System.String,System.Object[])">
            <summary>
            Asserts that HTTP response has content that matches a wildcard pattern.
            </summary>
            <param name="expectedWildcardText">
            The wildcard pattern with which the subject is matched, where * and ? have special meanings.
            <remarks>
                <para>* - Matches any number of characters. You can use the asterisk (*) anywhere in a character string. Example: wh* finds what, white, and why, but not awhile or watch.</para>
                <para>? - Matches a single alphabet in a specific position. Example: b?ll finds ball, bell, and bill.</para>
            </remarks>
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.#ctor(System.Net.Http.HttpResponseMessage)">
            <summary>
            Initialized a new instance of the <see cref="T:FluentAssertions.Web.HttpResponseMessageAssertions"/>
            class.
            </summary>
            <param name="value">The subject value to be asserted.</param>
        </member>
        <member name="P:FluentAssertions.Web.HttpResponseMessageAssertions.Identifier">
            <summary>
            Returns the type of the subject the assertion applies on.
            </summary>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be1XXInformational(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has a HTTP status code representing an informational response.
            </summary>
            <remarks>The HTTP response was an informational one if <see cref="P:System.Net.Http.HttpResponseMessage.StatusCode" /> was in the range 100-199.</remarks>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be2XXSuccessful(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has a successful HTTP status code.
            </summary>
            <remarks>The HTTP response was successful if <see cref="P:System.Net.Http.HttpResponseMessage.StatusCode" /> was in the range 200-299.</remarks>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be3XXRedirection(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has a HTTP status code representing a redirection response.
            </summary>
            <remarks>The HTTP response was an informational one if <see cref="P:System.Net.Http.HttpResponseMessage.StatusCode" /> was in the range 300-399.</remarks>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be4XXClientError(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has a HTTP status code representing a client error.
            </summary>
            <remarks>The HTTP response was a client error if <see cref="P:System.Net.Http.HttpResponseMessage.StatusCode" /> was in the range 400-499.</remarks>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be5XXServerError(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has a HTTP status code representing a server error.
            </summary>
            <remarks>The HTTP response was a server error if <see cref="P:System.Net.Http.HttpResponseMessage.StatusCode" /> was above 500.</remarks>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.HaveHttpStatusCode(System.Net.HttpStatusCode,System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has a HTTP status with the specified code.
            </summary>
            <param name="expected">
            The code of the expected HTTP Status.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.NotHaveHttpStatusCode(System.Net.HttpStatusCode,System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response does not have a HTTP status with the specified code.
            </summary>
            <param name="unexpected">
            The code of the unexpected HTTP Status.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be100Continue(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 100 Continue
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be101SwitchingProtocols(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 101 Switching Protocols
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be200Ok(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 200 Ok
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be201Created(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 201 Created
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be202Accepted(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 202 Accepted
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be203NonAuthoritativeInformation(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 203 Non Authoritative Information
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be204NoContent(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 204 No Content
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be205ResetContent(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 205 Reset Content
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be206PartialContent(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 206 Partial Content
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be300MultipleChoices(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 300 Multiple Choices
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be300Ambiguous(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 300 Ambiguous
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be301MovedPermanently(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 301 Moved Permanently
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be301Moved(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 301 Moved
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be302Found(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 302 Found
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be302Redirect(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 302 Redirect
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be303SeeOther(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 303 See Other
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be303RedirectMethod(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 303 Redirect Method
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be304NotModified(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 304 Not Modified
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be305UseProxy(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 305 Use Proxy
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be306Unused(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 306 Unused
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be307TemporaryRedirect(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 307 Temporary Redirect
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be307RedirectKeepVerb(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 307 Redirect Keep Verb
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be400BadRequest(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 400 BadRequest
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be401Unauthorized(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 401 Unauthorized
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be402PaymentRequired(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 402 Payment Required
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be403Forbidden(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 403 Forbidden
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be404NotFound(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 404 Not Found
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be405MethodNotAllowed(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 405 Method Not Allowed
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be406NotAcceptable(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 406 Not Acceptable
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be407ProxyAuthenticationRequired(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 407 Proxy Authentication Required
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be408RequestTimeout(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 408 Request Timeout
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be409Conflict(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 409 Conflict
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be410Gone(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 410 Gone
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be411LengthRequired(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 411 Length Required
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be412PreconditionFailed(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 412 Precondition Failed
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be413RequestEntityTooLarge(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 413 Request Entity Too Large
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be414RequestUriTooLong(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 414 Request Uri Too Long
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be415UnsupportedMediaType(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 415 Unsupported Media Type
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be416RequestedRangeNotSatisfiable(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 416 Requested Range Not Satisfiable
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be417ExpectationFailed(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 417 Expectation Failed
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be422UnprocessableEntity(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 422 UnprocessableEntity
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be429TooManyRequests(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 429 TooManyRequests
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be426UpgradeRequired(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 426 UpgradeRequired
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be500InternalServerError(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 500 Internal Server Error
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be501NotImplemented(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 501 Not Implemented
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be502BadGateway(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 502 Bad Gateway
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be503ServiceUnavailable(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 503 Service Unavailable
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be504GatewayTimeout(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 504 Gateway Timeout
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Be505HttpVersionNotSupported(System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 505 Http Version Not Supported
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Satisfy(System.Action{System.Net.Http.HttpResponseMessage},System.String,System.Object[])">
            <summary>
            Asserts that an HTTP response satisfies an assertion.
            </summary>
            <param name="assertion">
            An assertion about the HTTP response.
            </param>
            <remarks>
            The assertion can be a single assertion or a collection of assertions if the assertion action is expressed as a statement lambda.
            </remarks>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Satisfy(System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task},System.String,System.Object[])">
            <summary>
            Asserts that an HTTP response satisfies an asynchronous assertion.
            </summary>
            <param name="assertion">
            An assertion about the HTTP response.
            </param>
            <remarks>
            The assertion can be a single assertion or a collection of assertions if the assertion action is expressed as a statement lambda.
            </remarks>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Satisfy``1(System.Action{``0},System.String,System.Object[])">
            <summary>
            Asserts that an HTTP response content can be a model that satisfies an assertion.
            </summary>
            <param name="assertion">
            An assertion regarding the given model.
            </param>
            <remarks>
            The assertion can be a single assertion or a collection of assertions if the assertion action is expressed as a statement lambda.
            </remarks>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Satisfy``1(``0,System.Action{``0},System.String,System.Object[])">
            <summary>
            Asserts that an HTTP response content can be a model that satisfies an assertion starting from an inferred model structure.
            </summary>
            <param name="givenModelStructure">
            A proposed model structure that will help to compose the assertions. This is used to defined the type of the asserted model and it doesn't have to contain other values than the default one.
            </param>
            <remarks>
            The assertion can be a single assertion or a collection of assertions if the assertion action is expressed as a statement lambda.
            </remarks>
            <param name="assertion">
            An assertion or a collection of assertions regarding the given model.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Satisfy``1(System.Func{``0,System.Threading.Tasks.Task},System.String,System.Object[])">
            <summary>
            Asserts that an HTTP response content can be a model that satisfies an asynchronous assertion.
            </summary>
            <param name="assertion">
            An assertion regarding the given model.
            </param>
            <remarks>
            The assertion can be a single assertion or a collection of assertions if the assertion action is expressed as a statement lambda.
            </remarks>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageAssertions.Satisfy``1(``0,System.Func{``0,System.Threading.Tasks.Task},System.String,System.Object[])">
            <summary>
            Asserts that an HTTP response content can be a model that satisfies an asynchronous assertion starting from an inferred model structure.
            </summary>
            <param name="givenModelStructure">
            A proposed model structure that will help to compose the assertions. This is used to defined the type of the asserted model and it doesn't have to contain other values than the default one.
            </param>
            <remarks>
            The assertion can be a single assertion or a collection of assertions if the assertion action is expressed as a statement lambda.
            </remarks>
            <param name="assertion">
            An assertion or a collection of assertions regarding the given model.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.Web.HttpResponseMessageFormatter.Format(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)">
            <inheritdoc />
        </member>
        <member name="T:FluentAssertions.Web.Internal.TaskExtensions">
            <summary>
            Some unit test frameworks (like xUnit) have their own synchronization context
            that does not work well with blocking waits and can lead to deadlocks.
            These methods create the task in the default synchronization context
            and blocks until the task is completed.
            </summary>
        </member>
        <member name="T:FluentAssertions.BadRequestAssertionsExtensions">
            <summary>
            Contains extension methods for custom assertions in unit tests related to <see cref="T:FluentAssertions.Web.BadRequestAssertions"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.BadRequestAssertionsExtensions.HaveError(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a Bad Request HTTP response content contains an error message identifiable by an expected field name and a wildcard error text.
            </summary>
            <remarks>
            This assertion considers the HTTP response content a JSON generated by the ASP.NET Core 3.0 framework or less
            </remarks>
            <param name="expectedErrorField">
            The expected field name.
            </param>
            <param name="expectedWildcardErrorMessage">
            The wildcard pattern with which the error field associated error message is matched, where * and ? have special meanings.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.BadRequestAssertionsExtensions.OnlyHaveError(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a Bad Request HTTP response content contains only a single error message identifiable by an expected field name and a wildcard error text.
            </summary>
            <remarks>
            This assertion considers the HTTP response content a JSON generated by the ASP.NET Core 3.0 framework or less
            </remarks>
            <param name="expectedErrorField">
            The expected field name.
            </param>
            <param name="expectedWildcardErrorMessage">
            The wildcard pattern with which the error field associated error message is matched, where * and ? have special meanings.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.BadRequestAssertionsExtensions.NotHaveError(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.String,System.Object[])">
            <summary>
            Asserts that a Bad Request HTTP response content does not contain an error message identifiable by an expected field name.
            </summary>
            <remarks>
            This assertion considers the HTTP response content a JSON generated by the ASP.NET Core 3.0 framework or less
            </remarks>
            <param name="expectedErrorField">
            The expected field name.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.BadRequestAssertionsExtensions.HaveErrorMessage(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.String,System.Object[])">
            <summary>
            Asserts that a Bad Request HTTP response content contains an error message identifiable by an wildcard error text.
            </summary>
            <param name="expectedWildcardErrorMessage">
            The wildcard pattern with which the error field associated error message is matched, where * and ? have special meanings.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="T:FluentAssertions.DeserializationException">
            <summary>
            Captures serialization exceptions.
            </summary>
        </member>
        <member name="M:FluentAssertions.DeserializationException.#ctor">
            <summary>
            Argless constructor used to created new instances of this class.
            </summary>
        </member>
        <member name="M:FluentAssertions.DeserializationException.#ctor(System.String)">
            <summary>
            Constructor used to created new instances of this class given a certain message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:FluentAssertions.DeserializationException.#ctor(System.String,System.Exception)">
            <summary>
             Constructor used to created new instances of this class given a certain message and an exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">Usually the caught inner exception.</param>
        </member>
        <member name="M:FluentAssertions.DeserializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Specialized constructor used to deserialize eventually serialized exceptions of this type.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="T:FluentAssertions.FluentAssertionsWebConfig">
            <summary>
            Holder of the global <see cref="T:FluentAssertions.FluentAssertionsWebConfig"/>
            </summary>
        </member>
        <member name="P:FluentAssertions.FluentAssertionsWebConfig.Serializer">
            <summary>
            The serializer instance used to deserialize the responses into a model of a specified typed
            </summary>
        </member>
        <member name="T:FluentAssertions.HeadersAssertionsExtensions">
            <summary>
            Contains extension methods for custom assertions in unit tests related to <see cref="T:FluentAssertions.Web.HeadersAssertions"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.HeadersAssertionsExtensions.HaveHeader(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.String,System.Object[])">
            <summary>
            Asserts that an HTTP response has a named header.
            </summary>
            <param name="expectedHeader">
            The expected header with which the HTTP headers list is matched.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HeadersAssertionsExtensions.NotHaveHeader(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.String,System.Object[])">
            <summary>
            Asserts that an HTTP response does not have a named header.
            </summary>
            <param name="expectedHeader">
            The expected header with which the HTTP headers list is matched.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="T:FluentAssertions.HttpResponseContentAssertionsExtensions">
            <summary>
            Contains extension methods for custom assertions in unit tests related to Http Response Content Assertions
            </summary>
        </member>
        <member name="M:FluentAssertions.HttpResponseContentAssertionsExtensions.BeEmpty(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that HTTP response content is empty
            </summary>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpResponseContentAssertionsExtensions.BeAs``1(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},``0,System.Func{FluentAssertions.Equivalency.EquivalencyAssertionOptions{``0},FluentAssertions.Equivalency.EquivalencyAssertionOptions{``0}},System.String,System.Object[])">
            <summary>
            Asserts that HTTP response content can be an equivalent representation of the expected model.
            </summary>
            <param name="expectedModel">
            The expected model.
            </param>
            <param name="options">
            A reference to the <see cref="T:FluentAssertions.Equivalency.EquivalencyAssertionOptions`1"/> configuration object that can be used
            to influence the way the object graphs are compared. You can also provide an alternative instance of the
            <see cref="T:FluentAssertions.Equivalency.EquivalencyAssertionOptions`1"/> class. The global defaults are determined by the
            <see cref="T:FluentAssertions.AssertionOptions"/> class.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpResponseContentAssertionsExtensions.BeAs``1(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},``0,System.String,System.Object[])">
            <summary>
            Asserts that HTTP response content can be an equivalent representation of the expected model.
            </summary>
            <param name="expectedModel">
            The expected model.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpResponseContentAssertionsExtensions.MatchInContent(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.String,System.Object[])">
            <summary>
            Asserts that HTTP response has content that matches a wildcard pattern.
            </summary>
            <param name="expectedWildcardText">
            The wildcard pattern with which the subject is matched, where * and ? have special meanings.
            <remarks>
                <para>* - Matches any number of characters. You can use the asterisk (*) anywhere in a character string. Example: wh* finds what, white, and why, but not awhile or watch.</para>
                <para>? - Matches a single alphabet in a specific position. Example: b?ll finds ball, bell, and bill.</para>
            </remarks>
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="T:FluentAssertions.HttpStatusCodeAssertionsExtensions">
            <summary>
            Contains extension methods for custom assertions in unit tests related to <see cref="T:FluentAssertions.Web.BadRequestAssertions"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be1XXInformational(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has a HTTP status code representing an informational response.
            </summary>
            <remarks>The HTTP response was an informational one if <see cref="P:System.Net.Http.HttpResponseMessage.StatusCode" /> was in the range 100-199.</remarks>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be2XXSuccessful(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has a successful HTTP status code.
            </summary>
            <remarks>The HTTP response was successful if <see cref="P:System.Net.Http.HttpResponseMessage.StatusCode" /> was in the range 200-299.</remarks>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be3XXRedirection(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has a HTTP status code representing a redirection response.
            </summary>
            <remarks>The HTTP response was an informational one if <see cref="P:System.Net.Http.HttpResponseMessage.StatusCode" /> was in the range 300-399.</remarks>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be4XXClientError(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has a HTTP status code representing a client error.
            </summary>
            <remarks>The HTTP response was a client error if <see cref="P:System.Net.Http.HttpResponseMessage.StatusCode" /> was in the range 400-499.</remarks>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be5XXServerError(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has a HTTP status code representing a server error.
            </summary>
            <remarks>The HTTP response was a server error if <see cref="P:System.Net.Http.HttpResponseMessage.StatusCode" /> was above 500.</remarks>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.HaveHttpStatusCode(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.Net.HttpStatusCode,System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has a HTTP status with the specified code.
            </summary>
            <param name="expected">
            The code of the expected HTTP Status.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.NotHaveHttpStatusCode(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.Net.HttpStatusCode,System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response does not have a HTTP status with the specified code.
            </summary>
            <param name="unexpected">
            The code of the unexpected HTTP Status.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be100Continue(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 100 Continue
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be101SwitchingProtocols(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 101 Switching Protocols
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be200Ok(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 200 Ok
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be201Created(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 201 Created
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be202Accepted(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 202 Accepted
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be203NonAuthoritativeInformation(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 203 Non Authoritative Information
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be204NoContent(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 204 No Content
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be205ResetContent(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 205 Reset Content
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be206PartialContent(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 206 Partial Content
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be300MultipleChoices(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 300 Multiple Choices
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be300Ambiguous(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 300 Ambiguous
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be301MovedPermanently(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 301 Moved Permanently
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be301Moved(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 301 Moved
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be302Found(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 302 Found
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be302Redirect(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 302 Redirect
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be303SeeOther(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 303 See Other
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be303RedirectMethod(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 303 Redirect Method
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be304NotModified(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 304 Not Modified
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be305UseProxy(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 305 Use Proxy
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be306Unused(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 306 Unused
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be307TemporaryRedirect(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 307 Temporary Redirect
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be307RedirectKeepVerb(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 307 Redirect Keep Verb
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be400BadRequest(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 400 BadRequest
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be401Unauthorized(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 401 Unauthorized
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be402PaymentRequired(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 402 Payment Required
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be403Forbidden(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 403 Forbidden
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be404NotFound(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 404 Not Found
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be405MethodNotAllowed(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 405 Method Not Allowed
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be406NotAcceptable(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 406 Not Acceptable
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be407ProxyAuthenticationRequired(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 407 Proxy Authentication Required
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be408RequestTimeout(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 408 Request Timeout
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be409Conflict(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 409 Conflict
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be410Gone(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 410 Gone
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be411LengthRequired(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 411 Length Required
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be412PreconditionFailed(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 412 Precondition Failed
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be413RequestEntityTooLarge(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 413 Request Entity Too Large
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be414RequestUriTooLong(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 414 Request Uri Too Long
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be415UnsupportedMediaType(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 415 Unsupported Media Type
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be416RequestedRangeNotSatisfiable(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 416 Requested Range Not Satisfiable
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be417ExpectationFailed(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 417 Expectation Failed
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be422UnprocessableEntity(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 422 UnprocessableEntity
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be429TooManyRequests(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 429 TooManyRequests
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be426UpgradeRequired(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 426 UpgradeRequired
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be500InternalServerError(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 500 Internal Server Error
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be501NotImplemented(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 501 Not Implemented
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be502BadGateway(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 502 Bad Gateway
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be503ServiceUnavailable(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 503 Service Unavailable
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be504GatewayTimeout(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 504 Gateway Timeout
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.HttpStatusCodeAssertionsExtensions.Be505HttpVersionNotSupported(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.String,System.Object[])">
            <summary>
            Asserts that a HTTP response has the HTTP status 505 Http Version Not Supported
            </summary>        
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="T:FluentAssertions.ISerializer">
            <summary>
            Provides an abstraction to deserialize a Stream of binary data into a C# object.
            </summary>
        </member>
        <member name="M:FluentAssertions.ISerializer.Deserialize(System.IO.Stream,System.Type)">
            <summary>
             Deserialize a Stream of binary data into a C# object of a specific model.
            </summary>
            <param name="content">The stream to read data from.</param>
            <param name="modelType">The deserialized model's structure.</param>
            <returns>An object representing the model.</returns>
        </member>
        <member name="T:FluentAssertions.SatisfyHttpResponseMessageAssertionsExtensions">
            <summary>
            Contains extension methods for custom assertions in unit tests related to Http Response Message.
            </summary>
        </member>
        <member name="M:FluentAssertions.SatisfyHttpResponseMessageAssertionsExtensions.Satisfy(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.Action{System.Net.Http.HttpResponseMessage},System.String,System.Object[])">
            <summary>
            Asserts that an HTTP response satisfies an assertion.
            </summary>
            <param name="assertion">
            An assertion about the HTTP response.
            </param>
            <remarks>
            The assertion can be a single assertion or a collection of assertions if the assertion action is expressed as a statement lambda.
            </remarks>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.SatisfyHttpResponseMessageAssertionsExtensions.Satisfy(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task},System.String,System.Object[])">
            <summary>
            Asserts that an HTTP response satisfies an asynchronous assertion.
            </summary>
            <param name="assertion">
            An assertion about the HTTP response.
            </param>
            <remarks>
            The assertion can be a single assertion or a collection of assertions if the assertion action is expressed as a statement lambda.
            </remarks>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="T:FluentAssertions.SatisfyModelAssertionsExtensions">
            <summary>
            Contains extension methods for custom assertions in unit tests related to Http Response Message.
            </summary>
        </member>
        <member name="M:FluentAssertions.SatisfyModelAssertionsExtensions.Satisfy``1(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.Action{``0},System.String,System.Object[])">
            <summary>
            Asserts that an HTTP response content can be a model that satisfies an assertion.
            </summary>
            <param name="assertion">
            An assertion regarding the given model.
            </param>
            <remarks>
            The assertion can be a single assertion or a collection of assertions if the assertion action is expressed as a statement lambda.
            </remarks>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.SatisfyModelAssertionsExtensions.Satisfy``1(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},``0,System.Action{``0},System.String,System.Object[])">
            <summary>
            Asserts that an HTTP response content can be a model that satisfies an assertion starting from an inferred model structure.
            </summary>
            <param name="givenModelStructure">
            A proposed model structure that will help to compose the assertions. This is used to defined the type of the asserted model and it doesn't have to contain other values than the default one.
            </param>
            <remarks>
            The assertion can be a single assertion or a collection of assertions if the assertion action is expressed as a statement lambda.
            </remarks>
            <param name="assertion">
            An assertion or a collection of assertions regarding the given model.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.SatisfyModelAssertionsExtensions.Satisfy``1(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},System.Func{``0,System.Threading.Tasks.Task},System.String,System.Object[])">
            <summary>
            Asserts that an HTTP response content can be a model that satisfies an asynchronous assertion.
            </summary>
            <param name="assertion">
            An assertion regarding the given model.
            </param>
            <remarks>
            The assertion can be a single assertion or a collection of assertions if the assertion action is expressed as a statement lambda.
            </remarks>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="M:FluentAssertions.SatisfyModelAssertionsExtensions.Satisfy``1(FluentAssertions.Primitives.HttpResponseMessageAssertions{FluentAssertions.Primitives.HttpResponseMessageAssertions},``0,System.Func{``0,System.Threading.Tasks.Task},System.String,System.Object[])">
            <summary>
            Asserts that an HTTP response content can be a model that satisfies an asynchronous assertion starting from an inferred model structure.
            </summary>
            <param name="givenModelStructure">
            A proposed model structure that will help to compose the assertions. This is used to defined the type of the asserted model and it doesn't have to contain other values than the default one.
            </param>
            <remarks>
            The assertion can be a single assertion or a collection of assertions if the assertion action is expressed as a statement lambda.
            </remarks>
            <param name="assertion">
            An assertion or a collection of assertions regarding the given model.
            </param>
            <param name="because">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
            Zero or more objects to format using the placeholders in <see paramref="because" />.
            </param>
        </member>
        <member name="T:FluentAssertions.SystemTextJsonSerializerConfig">
            <summary>
            Holder of the global <see cref="T:System.Text.Json.JsonSerializerOptions"/>
            </summary>
        </member>
        <member name="F:FluentAssertions.SystemTextJsonSerializerConfig.Options">
            <summary>
            The options used to deserialize a JSON into a C# object
            </summary>
        </member>
    </members>
</doc>
